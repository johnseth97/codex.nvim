name: CI

on:
  push:
    branches: [main, ci-dev]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Neovim ${{ matrix.neovim }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        neovim: ["stable", "v0.10.0", "nightly"]

    steps:
      - name: Checkout plugin
        uses: actions/checkout@v4

      - name: Install Neovim ${{ matrix.neovim }}
        run: |
          set -euo pipefail

          VERSION=${{ matrix.neovim }}

          # All historic 0.x tags use nvim-linux64.tar.gz, everything newer uses -x86_64
          if [[ "$VERSION" =~ ^v0\.[0-9]+\. ]]; then
            FILENAME=nvim-linux64.tar.gz
          else
            FILENAME=nvim-linux-x86_64.tar.gz
          fi

          URL="https://github.com/neovim/neovim/releases/download/${VERSION}/${FILENAME}"
          echo "Downloading $URL"

          curl -fL -o nvim.tar.gz "$URL"        # -f = fail on 4xx/5xx, -L = follow redirects

          mkdir nvim-extract
          tar -xzf nvim.tar.gz -C nvim-extract

          DIR="$(ls nvim-extract | head -n1)"   # should be nvim-linux64 or nvim-linux-x86_64
          sudo mv "nvim-extract/$DIR" /opt/nvim
          echo "/opt/nvim/bin" >> "$GITHUB_PATH"

      - name: Verify Neovim
        run: nvim --version

      - name: Install Plenary
        run: |
          mkdir -p ~/.local/share/nvim/site/pack/test/start
          git clone https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/test/start/plenary.nvim

      - name: Install LuaRocks + luacheck
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y lua5.1 liblua5.1-0-dev luarocks
          luarocks --local install luacheck            # installs into ~/.luarocks
          echo "$HOME/.luarocks/bin" >> $GITHUB_PATH

      - name: Lint plugin
        run: luacheck lua/
      - name: Run tests
        run: nvim --headless -u tests/minimal_init.lua -c "PlenaryBustedDirectory tests"

      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        with:
          files: coverage-final.json
          token: ${{ secrets.CODECOV_TOKEN }} # Add to repo secrets
